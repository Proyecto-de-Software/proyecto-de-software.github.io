{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Infraestructura del servidor la c\u00e1tedra","text":"<p>Informaci\u00f3n de la infraestructura del servidor de la asignatura Proyecto de Software.</p>"},{"location":"#infraestructura","title":"Infraestructura","text":""},{"location":"#versiones-a-utilizar","title":"Versiones a utilizar","text":"<ul> <li>Lenguaje: Python 3.8.10 (confirmar).</li> <li>Servidor Web: nginx/1.18.0 (Ubuntu) (confirmar).</li> <li>Dependencias Python: Poetry (1.6.1) (confirmar).</li> <li>Servidor de Base de Datos: PostgreSQL 15 (confirmar).</li> <li>Node: v14.20.0 (npm 6.14.17) (confirmar).</li> </ul>"},{"location":"#codigo-en-el-server-para-cada-grupo","title":"C\u00f3digo en el server para cada grupo","text":"<p> N\u00famero <p> </p> <p> Admin - Grupo #00</p> <p> Portal - Grupo #00</p>"},{"location":"#logs","title":"Logs","text":"<p>Info</p> <p>Pronto se publicar\u00e1n los enlaces para poder visualizar los logs.</p>"},{"location":"#base-de-datos","title":"Base de datos","text":"<p>Info</p> <p>Aqu\u00ed publicaremos la direcci\u00f3n para acceder a la base de datos de cada grupo.</p>"},{"location":"#almacenamiento-de-objetos","title":"Almacenamiento de objetos","text":"<p>Info</p> <p>Pronto se publicar\u00e1n los enlaces para poder acceder al almacenamiento de objetos (MINIO).</p>"},{"location":"#variables-de-entorno","title":"Variables de entorno","text":"<p>Info</p> <p>Pronto se publicar\u00e1n las variables de entorno que se deben configurar en el servidor (Vault).</p>"},{"location":"explicaciones-2023/","title":"Explicaciones pr\u00e1cticas","text":""},{"location":"explicaciones-2023/#clase-0-intro-python-basico","title":"Clase 0 - Intro + Python b\u00e1sico","text":""},{"location":"explicaciones-2023/#clase-1-git","title":"Clase 1 - Git","text":""},{"location":"explicaciones-2023/#clase-2-aplicacion-base-deploy","title":"Clase 2 - Aplicacion base + deploy","text":""},{"location":"explicaciones-2023/#clase-3-mvc-blueprints","title":"Clase 3 - MVC + Blueprints","text":""},{"location":"explicaciones-2023/#clase-4-database-configs-orm","title":"Clase 4 - Database + Configs + ORM","text":""},{"location":"explicaciones-2023/#clase-5-autenticacion","title":"Clase 5 - Autenticaci\u00f3n","text":""},{"location":"explicaciones-2023/#clase-6-autorizacion","title":"Clase 6 - Autorizaci\u00f3n","text":""},{"location":"explicaciones-2023/#clase-7-api-rest","title":"Clase 7 - API Rest","text":""},{"location":"explicaciones-2023/#clase-8-vue-js","title":"Clase 8 - Vue JS","text":""},{"location":"explicaciones/","title":"Explicaciones pr\u00e1cticas","text":"<p>Info</p> <p>A\u00fan no se public\u00f3 ning\u00fana explicaci\u00f3n pr\u00e1ctica.</p>"},{"location":"blog/","title":"Posts","text":""},{"location":"blog/2022/08/01/comandos/","title":"Comandos","text":"<p>En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en <code>GitBash</code> si trabajan con Windows.</p>"},{"location":"blog/2022/08/01/comandos/#comandos-de-consola","title":"Comandos de consola","text":"<pre><code># Imprimir el directorio actual.\npwd\n\n# Listar todos los archivos y directorios del directorio actual.\nls\n\n# Igual que el anterior pero incluye los archivos y directorios ocultos.\nls -a\n\n# Crear un nuevo directorio en el actual llamado \"dirname\".\nmkdir dirname\n\n# Crear un archivo en el directorio actual llamado \"filename\".\ntouch filename\n\n# Moverse al directorio \"code/python\".\ncd code/python\n</code></pre>"},{"location":"blog/2022/08/01/comandos/#comandos-de-git","title":"Comandos de git","text":"<pre><code># Mostrar el estado de los archivos respecto al repositorio.\ngit status\n\n# Agregar el archivo filename al versionado de git.\ngit add &lt;filename&gt;\n\n# Agregar todos los archivos que sufieron una modificaci\u00f3n al versionado.\ngit add .\n\n# Generar un commit con todos los archivos que fueron modificados y agregados a\n# git. Documenta el commit con el mensaje que escribamos.\ngit commit -m &lt;mensaje&gt;\n\n# Generar una nueva rama localmente con el nombre &lt;branch_name&gt;. Y moverse a\n# esa rama.\ngit checkout -b &lt;branch_name&gt;\n\n# Moverse a la rama &lt;branch_name&gt; local y si no existe la crea y se mueve.\ngit checkout &lt;branch_name&gt;\n\n# Subir los cambios en commits locales a la rama &lt;branch_name&gt; ubicada en el\n# remote con nombre origin.\ngit push origin &lt;branch_name&gt;\n\n# Descargar cambios en commits que est\u00e9n en la rama del remote origin para la\n# rama &lt;branch_name&gt;.\ngit pull origin &lt;branch_name&gt;\n\n# Fusionar la rama &lt;branch_name&gt; dentro de la rama actual.\ngit merge &lt;branch_name&gt;\n</code></pre>"},{"location":"blog/2022/08/05/ssh/","title":"SSH","text":"<p>La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor.</p>"},{"location":"blog/2022/08/05/ssh/#requisitos","title":"Requisitos","text":"<p>Para la generaci\u00f3n de clave necesitamos ejecutar el comando <code>ssh-keygen</code>. El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash.</p>"},{"location":"blog/2022/08/05/ssh/#generacion-de-clave","title":"Generaci\u00f3n de clave","text":"<p>Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando:</p> <pre><code>ssh-keygen -t rsa -b 2048 -C \"email@example.com\"\n</code></pre> <p>Warning</p> <p>Recuerda poner tu email en lugar de usar \"email@example.com\".</p> <p>Se debe visualizar una respuesta similar a:</p> <pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/home/user/.ssh/id_rsa):\n</code></pre> <p>Presione la tecla Enter para guardar las llaves en el subdirectorio <code>.ssh/</code> dentro del directorio de su usuario. Sino puede completar una ruta alternativa.</p> <p>Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad.</p> <pre><code>Enter passphrase (empty for no passphrase):\nEnter same passphrase again:\n</code></pre> <p>Este passphrase no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter.</p> <p>Info</p> <p>Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando</p> <pre><code>ssh-keygen -p -f /path/to/ssh_key\n</code></pre> <p>Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente:</p> <pre><code>Your identification has been saved in /your_home/.ssh/id_rsa.\nYour public key has been saved in /your_home/.ssh/id_rsa.pub.\nThe key fingerprint is:\na9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|     ..o         |\n|   E o= .        |\n|    o. o         |\n|        ..       |\n|      ..S        |\n|     o o.        |\n|   =o.+.         |\n|. =++..          |\n|o=++.            |\n+-----------------+\n</code></pre> <p>Tus claves fueron generadas en el directorio <code>/your_home/.ssh</code>:</p> <ul> <li><code>/your_home/.ssh/id_rsa.pub</code> es tu clave p\u00fablica, y la que deber\u00e1s   configurar en los servicios que quieras hacer uso con este mecanismo.</li> <li><code>/your_home/.ssh/id_rsa</code>, es tu clave privada. Es importante que no pierdas   nunca este archivo ya que no vas a poder recuperarlo. Adem\u00e1s tampoco debes   compartir el mismo ya que cualquier persona con dicha clave podr\u00eda tomar tu   identidad.</li> </ul> <p>En nuesto caso, la clave p\u00fablica deber\u00e1 ser configurada en el servicio de Gitlab para autenticarnos de forma autom\u00e1tica a la hora de interactuar con el repositorio. Esto evita que tengamos que ingresar usuario y clave en cada operaci\u00f3n.</p> <p>En la siguiente gu\u00eda se explica como dar de alta nuestra clave ssh en Gitlab</p>"},{"location":"blog/2022/08/05/agregar-la-clave-ssh-en-gitlab/","title":"Agregar la clave SSH en Gitlab","text":"<p>Esta gu\u00eda tiene como objetivo mostrar c\u00f3mo agregar una clave SSH en Gitlab. La clave SSH es necesaria para poder realizar operaciones de Git de forma segura.</p> <ol> <li>Primero necesitamos crear nuestra clave SSH y copiarla en el clipboard. Esto    se puede ver en esta gu\u00eda.</li> <li>Luego debe ir al Gitlab de la c\u00e1tedra https://gitlab.catedras.linti.unlp.edu.ar/    e iniciar sesi\u00f3n.</li> <li>Selecciona en tu avatar en la esquina superior derecha y hace click en    C\u00f3nfiguraci\u00f3n.     </li> <li>Selecciona Claves SSH.</li> <li>Pega la clave p\u00fablica que copiaste en el paso uno en el textarea.</li> <li>Asegurate de incluir un nombre descriptivo a tu clave en el input T\u00edtulo,    como PC de casa.</li> <li>Opcionalmente se puede poner una fecha de expiraci\u00f3n a la clave.</li> <li>Selecciona el bot\u00f3n A\u00f1adir clave</li> </ol> <p></p>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/","title":"Gu\u00eda de Git","text":"<p>En la explicaci\u00f3n pr\u00e1ctica hablamos sobre los conceptos de <code>git</code>.</p>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#en-debian-based","title":"En Debian-based","text":"<pre><code>sudo apt update\nsudo apt upgrade\nsudo apt install git\n</code></pre>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#en-red-hat-based","title":"En Red Hat-based","text":"<pre><code>sudo yum upgrade\nsudo yum install git\n</code></pre>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#en-arch-based","title":"En Arch-based","text":"<pre><code>sudo pacman -S git\n</code></pre>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#en-macos","title":"En MacOS","text":"<pre><code>brew install git\n</code></pre>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#en-windows","title":"En Windows","text":"<p>Descargar en instalar de gitforwindows o de git-scm. Tener en cuenta que en la c\u00e1tedra vamos a utilizar <code>GitBash</code> por lo cual deben asegurarse que se instale.</p>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#como-usar-git","title":"\u00bfC\u00f3mo usar Git?","text":"<p>Vamos a ver dos formas para comenzar a trabajar con <code>Git</code>:</p> <ul> <li>Creando un repositorio desde cero y agregando los archivos iniciales.</li> <li>Descargando un proyecto ya creado y modificarlo.</li> </ul>"},{"location":"blog/2023/04/22/gu%C3%ADa-de-git/#configurar-informacion-en-git","title":"Configurar informaci\u00f3n en Git","text":"<p>En <code>git</code> cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente:</p> <pre><code>$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n</code></pre> <p>Para ver la configuraci\u00f3n:</p> <pre><code>git config --list\n</code></pre>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/","title":"Instalaci\u00f3n de Python","text":"<p>En esta gu\u00eda vamos a ver distintas formas de realizar la instalaci\u00f3n de la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos.</p> <p>El objetivo es que todos los alumnos que cursen la c\u00e1tedra puedan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra.</p> <p>El mecanismo para esto es utilizar una herramienta de manejo de versiones para Python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS.</p> <p>En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos.</p>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#por-que-usar-una-herramienta-para-manejar-versiones","title":"\u00bfPor qu\u00e9 usar una herramienta para manejar versiones?","text":"<p>La idea de usar este tipo de herramientas son:</p> <ul> <li>Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea)</li> <li>Permitir tener instaladas m\u00faltiples versiones</li> </ul> <p>Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python.</p> <p>La herramienta que vamos a usar es <code>pyenv</code></p>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#linux-y-macos","title":"Linux y MacOS","text":""},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#dependencias-necesarias","title":"Dependencias necesarias","text":"<p>Para que <code>pyenv</code> puede realizar la instalaci\u00f3n de las distintas versiones de <code>Python</code> de manera correcta es necesario contar algunas dependencias de su sistema operativo. Dependiendo del mismo las instrucciones de instalaci\u00f3n pueden encontrarse en el siguiente enlace de la documentaci\u00f3n de <code>pyenv</code> - Suggested build environment.</p>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#instalacion-con-git-linux-y-macos-recomendada","title":"Instalaci\u00f3n con Git (Linux y MacOS) RECOMENDADA","text":"<p>Hacer el checkout de <code>pyenv</code> en el directorio donde quieras que se instale. Un buen lugar puede ser <code>$HOME/.pyenv</code>.</p> <pre><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n</code></pre> <p>Define la variable de entorno <code>PYENV_ROOT</code> para tener disponible el path donde fue clonado el repositorio y agrega <code>$PYENV_ROOT/bin</code> a la variable <code>$PATH</code> para tener acceso al comando <code>pyenv</code> en la terminal.</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bash_profile\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bash_profile\n</code></pre> <p>Warning</p> <ul> <li>Si usas ZSH modifica el comando con <code>~/.zshrc</code> en lugar de <code>~/.bash_profile</code>.</li> <li>Para Ubuntu y Fedora usa <code>~/.bashrc</code> en lugar de <code>~/.bash_profile</code>.</li> </ul> <p>Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando:</p> <pre><code>echo -e 'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval \"$(pyenv init -)\"\\nfi' &gt;&gt; ~/.bash_profile\n</code></pre> <p>Warning</p> <p>Al igual que en el paso anterior reemplaza con <code>~/.zshrc</code> o <code>~/.bashrc</code> en el comando seg\u00fan corresponda.</p> <p>Luego reiniciar la terminal para que tome los cambios.</p> <p>Info</p> <p>Gu\u00eda completa en el README de pyenv.</p>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#instalacion-con-brew-macos","title":"Instalaci\u00f3n con brew (MacOS)","text":"<p>Se puede instalar <code>pyenv</code> usando el manejador de paquetes Homebrew para MacOS.</p> <pre><code>brew update\nbrew install pyenv\n</code></pre>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#uso-de-pyenv","title":"Uso de <code>pyenv</code>","text":"<p>Para buscar que versi\u00f3n de Python queremos instalar podemos usar:</p> <pre><code>pyenv install 3.6.8\n</code></pre> <p>Ahora podemos seleccionar esta versi\u00f3n como global</p> <pre><code>pyenv global 3.6.8\n</code></pre> <p>o como versi\u00f3n local en el directorio que nos encontremos</p> <pre><code>pyenv local 3.6.8\n</code></pre>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#instalacion-en-windows","title":"Instalaci\u00f3n en Windows","text":"<p>Estos son los enlaces para los ejecutables de Windows:</p> <ul> <li>Instalador ejecutable para Windows 32bits</li> <li>Instalador ejecutable para Windows 64bits</li> </ul> <p>Si necesita alguna alternativa distinta pueda obtener m\u00e1s opciones en el siguiente enlace.</p> <p>Al descargar el instalador debe ejecutarlo y seguir los pasos que ofrece. La primer ventana que se puede visualizar el la siguiente:</p> <p> </p> <p>Si es la primer versi\u00f3n de Python que instala se recomienda seguir la instalaci\u00f3n simple (\"Install Now\" en la imagen).</p> <p>Warning</p> <p>Tener en cuenta de seleccionar el checkbox de abajo para agregar el ejecutable de Python al PATH del sistema. Esto es fundamental para poder ejecutar Python correctamente.</p> <p></p> <p>Si todo sali\u00f3 correctamente deber\u00eda ver una imagen similar a esta:</p> <p> </p>"},{"location":"blog/2023/04/22/instalaci%C3%B3n-de-python/#chequeo-de-variable-de-entorno","title":"Chequeo de variable de entorno","text":"<p>Para verificar si tenemos Python correctamente instalado vamos a hacer uso de una terminal o consola de comandos.</p> <p>Para abrir el <code>cmd</code> tenemos al menos las siguientes dos opciones:</p> <ul> <li>En el buscador de windows ponemos \"cmd\" y seleccionamos la primer opci\u00f3n.  <p> - Presionamos las teclas <code>win</code> + <code>R</code>, ponemos \"cmd\", presionamos <code>enter</code>.  </p> <p>Para cualquiera de las opciones nos tiene que abrir la siguiente ventana:</p> <p> </p> <p>Para verificar si la instalaci\u00f3n de Python fu\u00e9 correcta vamos a ejecutar el int\u00e9rprete interactivo de Python. Lo podemos abrir escribiendo \"python\" en el cmd y prescionando la tecla <code>enter</code>. Deber\u00eda aparecer algo como esto:</p> <p> </p> <p>En esta terminal interactiva ya podemos ejecutar c\u00f3digo Python.</p>"},{"location":"blog/2023/07/23/merge-request-gitlab/","title":"Merge Request Gitlab","text":"<p>En esta gu\u00eda vamos a mostrar como realizar un Merge Request dentro de Gitlab. El uso de Merge Request puede aportar mucho en el proceso de desarrollo por varios motivos entre los que se destacan:</p> <ul> <li>Ayuda a que todo el equipo se mantenga al tanto de los cambios.</li> <li>Sirve para realizar la t\u00e9cnica de Code Review.</li> <li>Permite abrir una discusi\u00f3n o debate sobre la implementaci\u00f3n de una nueva   funcionalidad.</li> </ul> <p>Aqu\u00ed la documentaci\u00f3n oficial de Gitlab con mucho material sobre los Merge Request.</p> <p>En esta gu\u00eda veremos lo b\u00e1sico de la creaci\u00f3n de un MR y el proceso de aprobaci\u00f3n.</p>"},{"location":"blog/2023/07/23/merge-request-gitlab/#crear-un-nuevo-mr","title":"Crear un nuevo MR","text":"<p>Para crear un nuevo MR vamos al apartado Merge Request del men\u00fa de nuestro proyecto.</p> <p></p> <p>Dentro de ese apartado clickear la opci\u00f3n \"Nueva solicitud de fusi\u00f3n\".</p> <p></p> <p>En la siguiente ventana vamos a poder seleccionar cual es la rama origen y cual la rama destino que queremos fusionar.</p> <p></p> <p>Luego de elegir las ramas que queremos fusionar podemos ver algo as\u00ed:</p> <p></p> <p>Es necesario confirmar para pasar a la siguiente secci\u00f3n donde vamos a tener un formulario para completar con informaci\u00f3n \u00fatil para el Merge Request. Podemos ponerle una descripci\u00f3n, asignarlo a un compa\u00f1ero para que lo revise, asociarlo a un milestone particular, agregarle etiquetas y configurar unas opciones propias del MR como borrar la rama origen cuando se realice y usar la estrategia squash para el merge de nuestros commits.</p> <p>Adem\u00e1s, se ve el resumen de los commits que se van a agregar a la rama destino y una pesta\u00f1a con los cambios que se van a realizar en los archivos.</p> <p>Para confirmar la creaci\u00f3n del MR se debe hacer submit con el bot\u00f3n \"Submit merge request\".</p> <p></p>"},{"location":"blog/2023/07/23/merge-request-gitlab/#confirmar-mr","title":"Confirmar MR","text":"<p>Una vez confirmado pasamos a la vista del Merge Request creado donde se pueden visualizar los cambios, comentar, aprobar los cambios y finalmente realizar el merge.</p> <p>Algunas veces la rama que queremos funcionar puede tener conflictos. Estos conflictos Gitlab no los puede resolver, entonces no queda mas que avisar del problema, pedir que se resuelvan para poder realizar el merge.</p> <p></p> <p>Para resolver estos conflictos tenemos que traernos a la rama origen los cambios de la rama destino, es decir, hacemos un merge en sentido contrario. Luego queda resolver los conflictos que ocurran para luego hacer un push en nuestra rama origen.</p> <p>Si todo sale bien, al volver a la ventana anterior ahora vamos a ver esto:</p> <p></p> <p>Ahora podemos realizar el merge sin ning\u00fan problema.</p>"},{"location":"blog/2023/08/20/gu%C3%ADa-de-estilos/","title":"Gu\u00eda de estilos","text":"<p>Las gu\u00edas de estilo ayudan a los equipos de desarrollo a escribir c\u00f3digo consistente simplificando su entendimiento a todos/as los/as miembros del equipo.</p> <p>Python define en PEP8 como gu\u00eda de estilos base y en PEP257 la convenci\u00f3n para Docstrings. Teniendo esta referencia vamos a mencionar las normas mas importantes que esperamos que traten de cumplir en el trabajo.</p> <p>Antes de comenzar a nombrarlas es necesario decir de una regla base a todas las siguientes a la hora de desarrollar una aplicaci\u00f3n en equipo: ser consistentes. \u00bfQu\u00e9 quiere decir esto? que todos los miembros sigan las mismas reglas para el estilo de escritura del c\u00f3digo.</p>"},{"location":"blog/2023/08/20/gu%C3%ADa-de-estilos/#generales","title":"Generales","text":"<ul> <li>Uso de 4 espacios en lugar de tabs. Esto puede ser configurado en su editor</li> <li>120 es el m\u00e1ximo de caracteres por l\u00ednea. Preferentemente 80</li> <li>Dejar 2 l\u00edneas en blanco entre clases y funciones</li> <li>1 l\u00ednea en blanco dentro de la clases entre los m\u00e9todos de la misma</li> <li>No dejar l\u00edneas en blanco luego de la l\u00ednea <code>def</code></li> <li>No dejar espacios dentro de los par\u00e9ntesis, corchetes y las llaves</li> </ul> <pre><code>  # bien\n  spam(ham[1], {eggs: 2}, [])\n\n  # mal\n  spam( ham[ 1 ], { eggs: 2 }, )\n</code></pre> <ul> <li>Rodear los operadores con un espacio en blanco de ambos lados</li> </ul> <pre><code>  # bien\n  x == 1\n\n  # mal\n  x&lt;1\n</code></pre> <ul> <li>No usar espacios en blanco alrededor del <code>=</code> cuando se pasa un <code>keyword argument</code> o se define un valor por defecto en una funci\u00f3n</li> </ul> <pre><code>  # bien\n  def function_name(keyword_argument=value):\n      pass\n\n  function_name(keyword_argument=1)\n\n  # mal\n  def function_name(keyword_argument = value):\n      pass\n\n  function_name(keyword_argument = 1)\n</code></pre> <ul> <li>Usar l\u00edneas en blanco para la separaci\u00f3n de l\u00f3gica dentro de las   funciones/m\u00e9todos siempre que est\u00e9 justificado</li> <li>Mover los argumentos de una funci\u00f3n de una nueva l\u00ednea con indentaci\u00f3n si no   entran todos en la primer l\u00ednea</li> </ul> <pre><code>  # bien\n  def long_function_name(var_one, var_two, var_three,\n          var_four):\n      print(var_one)\n\n  # bien\n  def long_function_name(\n      var_one,\n      var_two,\n      var_three,\n      var_four\n  ):\n      print(var_one)\n</code></pre> <ul> <li>Mover las condiciones a nuevas l\u00edneas si no entran en el m\u00e1ximo determinado.   Esto te ayudar\u00e1 a entender la condici\u00f3n mirando de arriba hacia abajo.</li> </ul> <pre><code>  # bien\n  if (this_is_one_thing\n      and that_is_another_thing\n      or that_is_third_thing\n      or that_is_yet_another_thing\n      and one_more_thing\n  ):\n      do_something()\n</code></pre> <ul> <li>Usar Strings multil\u00edneas sin <code>\\\\</code>.</li> </ul> <pre><code>  raise AttributeError(\n      'Here is a multiline error message '\n      'shortened for clarity.'\n  )\n</code></pre> <ul> <li>Use argumentos nombrados para aumentar la legibilidad.</li> </ul> <pre><code>  # bien\n  urlget('[http://google.com](http://google.com/)', timeout=20)\n\n  # mal\n  urlget('[http://google.com](http://google.com/)', 20)\n</code></pre> <ul> <li>Nunca termines tus l\u00edneas con punto y coma y no las uses para tener dos   sentencias en la misma l\u00ednea.</li> <li>El encadenamiento de m\u00e9todos debe ser separado en m\u00faltiples l\u00edneas para mejor   legibilidad</li> </ul> <pre><code>  (df.write \\\n    .format('jdbc')\n    .option('url', 'jdbc:postgresql:dbserver')\n    .option('dbtable', 'schema.tablename')\n    .option('user', 'username')\n    .option('password', 'password')\n    .save()\n  )\n</code></pre> <ul> <li>Siempre comience el bloque de c\u00f3digo en una nueva l\u00ednea</li> </ul> <pre><code>  # bien\n  if flag:\n      return None\n\n  # mal\n  if flag: return None\n</code></pre> <ul> <li>Separa el s\u00edmbolo <code>#</code> del contenido del comentario con un espacio en blanco</li> </ul> <pre><code>  # good comment\n  #bad comment\n</code></pre>"},{"location":"blog/2023/08/20/gu%C3%ADa-de-estilos/#nombres","title":"Nombres","text":"<ul> <li>Usar <code>snake_case</code> para m\u00f3dulos, variables, atributos, funciones y nombre de   m\u00e9todos. NO USAR <code>CamelCase</code>.</li> <li>Usar <code>CamelCase</code> para el nombre de las clases.</li> <li>Los nombres deben referirse a lo que hace o contiene la variable, clase o   funci\u00f3n.</li> <li>No incluya el tipo de la variable en su nombre. Ej: use <code>personas</code> en lugar de   <code>lista_personas</code>.</li> </ul>"},{"location":"blog/2023/08/20/gu%C3%ADa-de-estilos/#docstrings","title":"Docstrings","text":"<ul> <li> <p>Escriba los docstrings contenidos con triple comillas dobles <code>\"\"\"</code></p> </li> <li> <p>Escriba los docstrings para m\u00e9todos que no sean tan simples. En los mismos   resuma descripci\u00f3n de comportamiento, argumentos, valores de retorno,   excepciones que se pueden lanzar</p> </li> </ul> <pre><code>  def some_method(name, state=None):\n      \"\"\"This function does something\n\n      :param name: The name to use\n      :type name: string\n      :param state: Current state to be in (optional, default: None)\n      :type state: bool\n      :returns:  int -- the return code\n      :raises: AttributeError, KeyError\n      \"\"\"\n      ...\n      return 0\n</code></pre>"},{"location":"blog/2023/08/20/gu%C3%ADa-de-estilos/#imports","title":"Imports","text":"<ul> <li>Evite los import relativos utilice import absolutos</li> <li>Nunca use <code>*</code> en los imports. Siempre sea expl\u00edcito sobre lo que va a importar</li> <li>Los imports deben escribirse en el siguiente orden separados por una l\u00ednea:</li> <li>M\u00f3dulos build-in (que vienen con Python)</li> <li>M\u00f3dulos third-party (paquetes externos que instal\u00f3)</li> <li>M\u00f3dulos del proyecto actual</li> </ul> <pre><code>  import os\n  import logging\n\n  import flask\n  from flask import url_for\n\n  from app.models.user import user\n</code></pre>"},{"location":"blog/2023/08/20/gu%C3%ADa-de-estilos/#malas-ideas","title":"Malas ideas","text":"<ul> <li>Variables globales</li> <li>Usar lambdas donde no se requiere</li> <li>Usar funciones embebidas</li> </ul>"},{"location":"blog/2023/08/20/gu%C3%ADa-de-estilos/#fuentes","title":"Fuentes","text":"<ul> <li>PEPs</li> <li>PEP8</li> <li>PEP257</li> </ul>"},{"location":"blog/2024/08/03/list-comprehensions/","title":"List comprehensions","text":"<p>La notaci\u00f3n por comprensi\u00f3n en Python esta directamente basada en la notaci\u00f3n matem\u00e1tica de conjuntos por comprensi\u00f3n.</p> <p>Esta gu\u00eda se puede leer de 2 formas distintas dependiendo del tiempo y dedicaci\u00f3n del lector:</p> <ol> <li>Completa: Da un panorama completo que ayuda a entender por qu\u00e9 la sint\u00e1xis de las list comprehensions es como es y la contrasta con otras formas de resolver el mismo problema.</li> <li>A partir de \"Introducci\u00f3n menos \u00f1o\u00f1a\": Muestra como usar las comprehensions de forma directa.</li> </ol>"},{"location":"blog/2024/08/03/list-comprehensions/#introduccion-nona","title":"Introducci\u00f3n \u00f1o\u00f1a","text":""},{"location":"blog/2024/08/03/list-comprehensions/#conjuntos-por-comprension-en-las-matematicas","title":"Conjuntos por comprensi\u00f3n en las matem\u00e1ticas","text":"<p>Como peque\u00f1o repaso, en matem\u00e1ticas desde la escuela nos ense\u00f1an a escribir conjuntos de distintas formas, 2 de ellas son:</p> <ul> <li>Por extensi\u00f3n o enumeraci\u00f3n: Se escriben expl\u00edcitamente todos los elementos que pertenecen al conjunto entre llaves. Por ejemplo: <code>{1, 3, 5, 7, 9}</code>.</li> <li>Por comprensi\u00f3n: El conjunto se define escribiendo las condiciones que debe cumplir entre llaves. Siguiendo con el ejemplo anterior: <code>{n\u00fameros naturales impares menores que diez}</code>.</li> </ul> <p>El \u00faltimo ejemplo se puede sofisticar m\u00e1s usando una notaci\u00f3n m\u00e1s matem\u00e1tica para mayor precisi\u00f3n. Por ejemplo:</p> <pre><code>{n / n \u2208 \u2115; n &lt; 10; n es impar}\n</code></pre> <p>Esto se podr\u00eda leer como \"Todo n, tal que n pertenece a los reales, es menor que diez y es impar\".</p> <p>Como veremos la notaci\u00f3n por comprensi\u00f3n de Python se parece mucho a este \u00faltimo ejemplo.</p>"},{"location":"blog/2024/08/03/list-comprehensions/#notacion-por-comprension-en-python","title":"Notaci\u00f3n por comprensi\u00f3n en Python","text":"<p>La notaci\u00f3n por comprensi\u00f3n en Python se puede usar para construir listas, conjuntos, diccionarios y generadores. Todos son muy similares, pero por simplicidad empezaremos definiendo listas.</p> <p>Tomaremos el ejemplo de la secci\u00f3n anterior queremos generar una lista de los \"n\u00fameros naturales impares menores que diez\". Se puede escribir una list comprehension de Python que tenga esos valores de la siguiente forma:</p> <pre><code>[n for n in range(1, 10) if n % 2 != 0]\n</code></pre> <p>Si comparamos este c\u00f3digo con la notaci\u00f3n matem\u00e1tica de conjuntos por comprensi\u00f3n vemos que sigue m\u00e1s o menos el mismo patr\u00f3n:</p> <ol> <li>Primer va el valor que nos interesa, <code>n</code>.</li> <li>Luego con el <code>for</code> obtenemos valores de <code>n</code> que son n\u00fameros naturales entre 1 y 10. Esto es como una combinaci\u00f3n de <code>n \u2208 \u2115</code> y <code>n &lt; 10</code>.</li> <li>Finalmente filtramos con el <code>if</code> los valores impares.</li> </ol>"},{"location":"blog/2024/08/03/list-comprehensions/#muchas-formas-de-construir-listas","title":"Muchas formas de construir listas","text":"<p>Python permite crear listas de muchas formas distintas. Tal vez la m\u00e1s familiar para la mayor\u00eda de les alumnes sea la forma procedural.</p>"},{"location":"blog/2024/08/03/list-comprehensions/#ejemplo-procedural","title":"Ejemplo procedural","text":"<pre><code>result = []\nfor n in range(10):\n    if n % 2 != 0:\n        result.append(n)\n</code></pre> <p>Al programar en forma procedural indicamos c\u00f3mo realizar una tarea. Como programadores al leer un c\u00f3digo con un <code>for</code> entendemos que ese c\u00f3digo itera y hace \"algo\", pero no podemos adivinar qu\u00e9 hace hasta leer bien el c\u00f3digo adentro y afuera de ese <code>for</code>.</p>"},{"location":"blog/2024/08/03/list-comprehensions/#ejemplo-con-map-y-filter","title":"Ejemplo con map y filter","text":"<p>Otra forma de resolver este problema ser\u00eda usar un paradigma m\u00e1s parecido al funcional y usar funciones como <code>map</code>, <code>filter</code> y <code>reduce</code> para resolver este tipo de problemas:</p> <pre><code>list(filter(lambda n: n % 2 != 0, range(1, 10)))\n</code></pre> <p>Ac\u00e1 en lugar de indicar el c\u00f3mo indicamos qu\u00e9 queremos hacer. Queremos un rango de n\u00fameros del 1 al 10, de ese rango queremos filtrar los impares y a ese resultado lo queremos en una lista.</p> <p>En este caso como programadores al leer la palabra <code>list</code> nos queda claro que estamos construyendo una lista y al leer <code>filter</code> queda claro que estamos filtrando informaci\u00f3n de alguna manera. Pero obviamente tenemos que estar familiarizados y acostumbrados a leer c\u00f3digo con <code>lambda</code>, <code>filter</code>, <code>map</code> o <code>reduce</code> para entender este tipo de soluciones.</p>"},{"location":"blog/2024/08/03/list-comprehensions/#volviendo-a-la-list-comprehension","title":"Volviendo a la list comprehension","text":"<p>La notaci\u00f3n por comprensi\u00f3n es un concepto b\u00e1sico y difundido de las matem\u00e1ticas. Tambi\u00e9n es una notaci\u00f3n que es usada distintos lenguajes de diferentes paradigmas.</p> <pre><code>[n for n in range(1, 10) if n % 2 != 0]\n</code></pre> <p>De forma similar al ejemplo anterior, con la list comprehesion indico el qu\u00e9 y no tanto el c\u00f3mo. Queda claro para el programador al ver los corchetes que estamos creando una lista, al ver el <code>range</code> veremos el conjunto de n\u00fameros inicial y por \u00faltimo al ver la condici\u00f3n del <code>if</code> vemos c\u00f3mo filtraremos ese conjunto de n\u00fameros para quedarnos con el resultado final.</p> <p>Obviamente necesitamos un poco de pr\u00e1ctica para entender este c\u00f3digo, pero s\u00f3lo es necesario saber c\u00f3mo se escribe un <code>for</code>, un <code>if</code> y en qu\u00e9 orden leer el c\u00f3digo para entenderlo.</p>"},{"location":"blog/2024/08/03/list-comprehensions/#introduccion-menos-nona","title":"Introducci\u00f3n menos \u00f1o\u00f1a","text":""},{"location":"blog/2024/08/03/list-comprehensions/#list-comprehension-basicas","title":"List comprehension b\u00e1sicas","text":"<p>La notaci\u00f3n por comprensi\u00f3n tiene c\u00f3mo minimo 2 partes, una expresi\u00f3n y un <code>for</code>:</p> <pre><code>[expression for variable in iterable]\n</code></pre> <p><code>expression</code> es el valor que guardaremos en la lista. Puede ser un valor arbitrario, la misma variable, una operaci\u00f3n aplicada a esa variable, etc...</p> <p><code>variable</code> es el elemento actual en una iteraci\u00f3n dada como en un <code>for</code> normal e <code>iterable</code> la lista, tupla, diccionario, generador, etc... que estamos iterando.</p> <p>Por ejemplo abajo la primer list comprehension retorna una lista con los n\u00fameros del 0 al 19 y la segunda retorna esos mismos n\u00fameros pero elevados al cubo:</p> <pre><code>numbers = [n for n in range(20)]\ncubes = [n**3 for n in range(20)]\n</code></pre> <p>Esas l\u00edneas equivalen a la siguiente soluci\u00f3n procedural:</p> <pre><code>numbers = []\nfor n in range(20):\n    numbers.append(n)\n\ncubes = []\nfor n in range(20):\n    cubes.append(n**3)\n</code></pre>"},{"location":"blog/2024/08/03/list-comprehensions/#con-if-para-filtrar","title":"Con <code>if</code> para filtrar","text":"<p>Muchas veces necesitamos filtrar los valores iterados para quedarnos los que cumplan una condici\u00f3n. Para eso podemos agregar un <code>if</code> (este <code>if</code> no tiene <code>else</code>). Por ejemplo si queremos una lista con todas las letras de un texto pasadas a may\u00fascula (descartando lo que no sea letra) podemos escribir:</p> <pre><code>text = \"La Plata es el principal centro pol\u00edtico, administrativo y educativo de la provincia de Buenos Aires. De acuerdo al censo argentino 2022 cuenta con 772.618 habitantes, mientras que su \u00e1rea metropolitana, el Gran La Plata, alcanza los 938.287 habitantes.\"\n\nuppercase_chars = [char.upper() for char in text if char.isalpha()]\n</code></pre> <p>Esta list comprehension equivale al siguiente c\u00f3digo procedural:</p> <pre><code>uppercase_chars = []\nfor char in text:\n    if char.isalpha()\n        uppercase_chars.append(char)\n</code></pre> <p>Notar que \u00e9ste <code>if</code> que se utiliza para filtrar va siempre al final de la list comprehension.</p>"},{"location":"blog/2024/08/03/list-comprehensions/#iterar-estructuras-anidadas","title":"Iterar estructuras anidadas","text":"<p>Es posible recorrer estructuras m\u00e1s complejas con <code>for</code> anidados. Por ejemplo supongamos que dada una matriz (en una lista de listas) queremos obtener una lista con los n\u00fameros impares dentro de esa matriz:</p> <pre><code>matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]\n\neven_numbers = [n for row in matrix for n in row if n % 2 != 0]\n</code></pre> <p>Lo anterior equivale al siguiente c\u00f3digo procedural:</p> <pre><code>even_numbers = []\nfor row in matrix:\n    for n in row:\n        if n % 2 != 0:\n            even_numbers.append(n)\n</code></pre> <p>Notar que los <code>for</code> se escriben en el mismo orden en la notaci\u00f3n por comprensi\u00f3n y en la procedural y que el <code>if</code> (en caso de haber un <code>if</code>) va al final de todo.</p>"},{"location":"blog/2024/08/03/list-comprehensions/#otros-objetos-que-se-pueden-definir-por-comprension","title":"Otros objetos que se pueden definir por comprensi\u00f3n","text":"<p>Podremos definir:</p> <ul> <li>Conjuntos: <code>{x for x in range(20) if x % 2 == 0}</code> (n\u00fameros pares menores que 20)</li> <li>Diccionarios: <code>{k: v for k, v in original.items() if k.startswith(\"h\")}</code> (creamos una copia del diccionario \"original\" que solo tiene las entradas cuya clave empieza con \"h\")</li> <li>Generadores: <code>(x ** 2 for x in itertools.count() if x % 2 == 0)</code> (creamos un generator que retorna el cuadrado de los n\u00fameros pares indefinidamente)</li> </ul>"},{"location":"blog/2024/08/03/list-comprehensions/#por-que-usaria-comprehensions-en-python","title":"\u00bfPor qu\u00e9 usar\u00eda comprehensions en Python?","text":"<ul> <li>Principalmente usaremos esta notaci\u00f3n para aportar legibilidad a nuestros programas. Es muy importante que los programas sean legibles y en general es m\u00e1s deseable expresar qu\u00e9 debe hacer el c\u00f3digo en lugar de expresar c\u00f3mo debe hacerlo.</li> <li>La forma procedural es a menudo poco clara en la intenci\u00f3n (no queda claro si adem\u00e1s de la lista se hacen otras cosas en el <code>for</code>) y es propensa a errores (es necesario por ejemplo recordar crear una lista vac\u00eda fuera del <code>for</code> y recordar hacer le <code>append</code>).</li> <li><code>map</code>, <code>filter</code> y <code>reduce</code> son funciones que resultan familiares a quienes trabajaron con lenguajes de programaci\u00f3n funcionales o influenciados por ellos. Pero pueden ser complicados de entender para quienes no vienen de ese mundo. Adicionalmente es necesario usar <code>lambdas</code> o funciones con nombre para usarlas agregando un poquito m\u00e1s de complejidad al programa.</li> </ul> <p>Todo esto no significa que siempre se debe usar notaci\u00f3n por comprensi\u00f3n, existen casos donde las otras opciones son m\u00e1s apropiadas y es nuestra tarea como programadores elegir entre ellas teniendo en cuenta:</p> <ul> <li>Funcionalidad requerida</li> <li>Legibilidad y expresividad</li> <li>Eficiencia (s\u00f3lo si es necesario)</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/coding/","title":"Coding","text":""},{"location":"blog/category/list-comprehensions/","title":"List comprehensions","text":""},{"location":"blog/category/python/","title":"Python","text":""},{"location":"blog/category/style-guide/","title":"Style Guide","text":""},{"location":"blog/category/gitlab/","title":"Gitlab","text":""},{"location":"blog/category/trabajo-colaborativo/","title":"Trabajo Colaborativo","text":""},{"location":"blog/category/merge-request/","title":"Merge Request","text":""},{"location":"blog/category/git/","title":"Git","text":""},{"location":"blog/category/instalaci%C3%B3n/","title":"Instalaci\u00f3n","text":""},{"location":"blog/category/bash/","title":"Bash","text":""},{"location":"blog/category/terminal/","title":"Terminal","text":""},{"location":"blog/category/ssh/","title":"SSH","text":""},{"location":"blog/category/setup/","title":"Setup","text":""}]}